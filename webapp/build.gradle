/*
 * gcUnicorn
 * Copyright (c) 2024 Martin Misiarz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */


import org.graalvm.buildtools.gradle.dsl.NativeImageOptions

import java.text.SimpleDateFormat

plugins {
    alias(libs.plugins.org.jetbrains.kotlin.jvm)
    alias(libs.plugins.org.springframework.boot)
    alias(libs.plugins.org.jetbrains.kotlin.plugin.spring)
    // https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html
    // https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html
    alias(libs.plugins.org.graalvm.buildtools.native)
}

tasks.named('bootJar').configure {
    manifest {
        attributes(
                "Created-On": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),
                "Implementation-Title": "gcUnicorn-webapp",
                "License": "GPL-2.0"
        )
    }
}

tasks.named('bootRun').configure {
    // To generate native metadata.
    jvmArgs = ["-agentlib:native-image-agent=config-output-dir=build/native/generated-metadata"]
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
        vendor = JvmVendorSpec.GRAAL_VM
    }
}

// https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html
graalvmNative {
    // It might not work as expected. It is better to set GRAALVM_HOME env variable instead.
    // See: https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html#configuration-toolchains-enabling.
    toolchainDetection = false

    binaries {
        main {
            mainClass = 'cz.babi.gcunicorn.webapp.ApplicationWrapperKt'
            imageName = "${project.name}-v${project.version}"
            buildArgs.add('--initialize-at-build-time=kotlin.DeprecationLevel')
            buildArgs.add('-H:+ReportExceptionStackTraces')

            buildArgs.add('-H:+UnlockExperimentalVMOptions')
//            buildArgs.add("-H:JNIConfigurationFiles=${projectDir.getAbsolutePath()}/src/graalvm/config/v1.1.1/jni-config.json")
//            buildArgs.add("-H:DynamicProxyConfigurationFiles=${projectDir.getAbsolutePath()}/src/graalvm/config/v1.1.1/proxy-config.json")
//            buildArgs.add("-H:ReflectionConfigurationFiles=${projectDir.getAbsolutePath()}/src/graalvm/config/v1.1.1/reflect-config.json")
//            buildArgs.add("-H:ResourceConfigurationFiles=${projectDir.getAbsolutePath()}/src/graalvm/config/v1.1.1/resource-config.json")

            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(21)
                vendor = JvmVendorSpec.GRAAL_VM
            }
        }
    }
}

jar {
    manifest {
        attributes(
                "Created-On": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),
                "Implementation-Title": "gcUnicorn-webapp",
                "Implementation-Version": project.version,
                "Build-Jdk-Spec": project.java.toolchain.languageVersion,
                "License": "GPL-2.0"
        )
    }
}

dependencies {
    implementation(
            platform(libs.spring.boot.dependencies),
            project(':core'),
            libs.spring.boot.autoconfigure,
            libs.spring.security.config,
            libs.spring.security.web,
            libs.spring.webmvc,
            libs.spring.websocket,
            libs.spring.messaging,
            libs.thymeleaf.spring6,
            libs.undertow.websockets.jsr
    )
    runtimeOnly(
            libs.jackson.module.kotlin,
            libs.reactive.streams,
            libs.kotlinx.coroutines.reactor,
            libs.logback.classic
    )
}
