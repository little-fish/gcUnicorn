/*
 * gcUnicorn
 * Copyright (C) 2018  Martin Misiarz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

buildscript {
    ext {
        versionAndroidTools = '7.0.4'
        versionSecrets = '2.0.1'
    }

    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$versionAndroidTools"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versionKotlin"
        classpath "com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin:$versionSecrets"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.kotlin.plugin.parcelize'
apply plugin: 'kotlin-kapt'

dependencies {
    implementation project(':gcUnicorn-core')
    implementation(
            "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versionKotlinCoroutines",
            "androidx.legacy:legacy-support-core-ui:$versionAndroidX",
            "com.google.android.material:material:$versionAndroidX",
            "androidx.appcompat:appcompat:$versionAndroidX",
            "androidx.preference:preference:$versionAndroidX",
            "androidx.constraintlayout:constraintlayout:$versionAndroidConstraint",
            "com.google.dagger:dagger:$versionDagger",
            "com.asamm:locus-api-android:$versionLocusApi",
            "androidx.preference:preference:$versionAndroidX",
            "com.takisoft.preferencex:preferencex:$versionFixSupport",
            "com.google.android.libraries.places:places:$versionPlaces",
            "androidx.multidex:multidex:$versionMultidex",
            "com.github.suchoX:PlacePicker:$versionPlacePicker",
            "com.google.android.material:material:$versionMaterial",
            "com.google.android.gms:play-services-maps:$versionPlayServicesMaps"
    )
    runtimeOnly(
            "org.slf4j:slf4j-android:$versionSlf4J"
    )
    kapt(
            "com.google.dagger:dagger-compiler:$versionDagger"
    )
}

configurations.all {
    resolutionStrategy {
        eachDependency { dependencyDetail ->
            if (dependencyDetail.requested.group == 'org.jetbrains.kotlin' && dependencyDetail.requested.name.startsWith('kotlin-stdlib')) {
                dependencyDetail.useVersion versionKotlin
            }
        }
    }
}

android {
    setCompileSdkVersion 32
    buildToolsVersion '30.0.3'

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId 'cz.babi.gcunicorn.android'
        
        minSdkVersion 16
        targetSdkVersion 32
        
        multiDexEnabled true
        
        versionCode 2
        versionName project.version
        
        vectorDrawables.useSupportLibrary = true
        
        resConfigs 'en', 'cs'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            crunchPngs false

            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFiles fileTree(dir: 'proguard-rules', include: '*.pro').getFiles() as File[]
        }

        dev {
            debuggable true

            crunchPngs false
        }
    }

    lintOptions {
        // Lint doesn't take extension function into consideration..
        abortOnError false

        checkReleaseBuilds true
    }
}

// Load keystore properties.
def keystoreProperties = new Properties()
def keystorePropertiesFile = file(keystoreFile)

if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(keystorePropertiesFile.newDataInputStream())
    
    if (keystoreProperties['keyAlias'] && keystoreProperties['keyPassword'] && keystoreProperties['storeFile'] && keystoreProperties['storePassword']) {
        android {
            signingConfigs {
                release {
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                    storeFile file(keystoreProperties['storeFile'])
                    storePassword keystoreProperties['storePassword']
                }
            }

            buildTypes {
                release {
                    signingConfig signingConfigs.release
                }
            }
        }
    }
}
