/*
 * gcUnicorn
 * Copyright (C) 2018  Martin Misiarz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

import java.text.SimpleDateFormat
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-serialization:$versionKotlin"
    }
}

plugins {
    id 'propdeps'
    id 'propdeps-idea'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.61'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.3.61'
    id 'org.jetbrains.kotlin.plugin.noarg' version '1.3.61'
}

apply plugin: 'kotlinx-serialization'

ext {
    // Version OkHttp.
    versionOkHttp = '3.11.0'
    // Version Spring.
    versionSpring = '5.2.3.RELEASE'
    // Version Kotlin XML Builder.
    versionKotlinXmlBuilder = '1.4.4'
    // Version Kotlin serialization.
    versionKotlinSerialization = '0.14.0'
}

dependencies {
    compile(
            "org.jetbrains.kotlin:kotlin-stdlib:$versionKotlin",
            "org.jetbrains.kotlin:kotlin-reflect:$versionKotlin",
            "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$versionKotlinSerialization",
            "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versionKotlinCoroutines",
            "com.squareup.okhttp3:okhttp:$versionOkHttp",
            "org.slf4j:slf4j-api:$versionSlf4J",
            "org.redundent:kotlin-xml-builder:$versionKotlinXmlBuilder"
    )
    testCompile(
            "org.testng:testng:$versionTestNG",
            "org.springframework:spring-context:$versionSpring",
            "org.springframework:spring-test:$versionSpring"
    )
    testRuntime(
            "ch.qos.logback:logback-classic:$versionLogback"
    )
}

compileKotlin.dependsOn(processResources)

jar {
    manifest {
        attributes(
                "Created-By": project.maintainer,
                "Created-On": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Build-JDK": getJavaVersion(),
                "Source-Compatibility": project.sourceCompatibility,
                "Target-Compatibility": project.targetCompatibility,
                "License": "GPL-2.0"
        )
    }
}

test {
    useTestNG()
}

// Use custom jdk if exists.
def localProperties = new Properties()
def localPropertiesFile = file(localPropertiesFile)

if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())

    if (localProperties['java.home']) {
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
            kotlinOptions {
                jdkHome = localProperties['java.home']
            }
        }
    }
}

/**
 * Obtain java version. It tries to load java from custom location (if exists).
 * @return Java version used for compilation.
 */
def getJavaVersion() {
    // Use custom jdk if exists.
    def localProperties = new Properties()
    def localPropertiesFile = file(localPropertiesFile)
    
    if (localPropertiesFile.exists()) {
        localProperties.load(localPropertiesFile.newDataInputStream())

        if (localProperties['java.home']) {
            def outStream = new ByteArrayOutputStream()
            exec {
                workingDir localProperties['java.home'] + File.separator + 'bin'
                if (OperatingSystem.current().isWindows()) {
                    commandLine 'cmd', '/c', 'java', '-version', '2>&1'
                } else {
                    commandLine 'java', '-version', '2>&1'
                }

                standardOutput = outStream
            }

            def matcher = (outStream.toString() =~ /\(build (.+)\)/)
            if (matcher.hasGroup()) {
                return matcher[0][1]
            }
        }
    }

    return System.getProperty('java.version')
}
