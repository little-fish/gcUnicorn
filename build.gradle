/*
 * gcUnicorn
 * Copyright (C) 2023  Martin Misiarz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

configure([ project(':core'), project(':webapp') ]) {
    def keystorePropertiesFile = project.file(keystoreFile)

    if (keystorePropertiesFile.exists()) {
        // Load keystore properties.
        def keystoreProperties = new Properties()
        keystoreProperties.load(keystorePropertiesFile.newDataInputStream())

        // Default Gradle signing.
        if (keystoreProperties['signing.keyId'] && keystoreProperties['signing.password'] && keystoreProperties['signing.secretKeyRingFile']) {
            project.ext['signing.keyId'] = keystoreProperties['signing.keyId']
            project.ext['signing.password'] = keystoreProperties['signing.password']
            project.ext['signing.secretKeyRingFile'] = keystoreProperties['signing.secretKeyRingFile']

            project.plugins.apply('signing')

            signing {
                sign configurations.archives
            }
        }

        // Custom JAR signing.
        if (keystoreProperties['jarsigning.keystore'] && keystoreProperties['jarsigning.keystoreType'] && keystoreProperties['jarsigning.keystorePassword'] && keystoreProperties['jarsigning.alias'] && keystoreProperties['jarsigning.keyPassword']) {
            if (project.name == 'core') {
                def task = project.tasks.register('signedJar', Sign) {
                    group = 'build'
                    dependsOn = [ project.tasks.named('signArchives'), project.tasks.named('test') ]
                    buildDir = project.buildDir.absolutePath
                    archiveName = project.tasks.jar.archiveFileName
                    alias = keystoreProperties['jarsigning.alias']
                    keyStoreType = keystoreProperties['jarsigning.keystoreType']
                    keyStoreLocation = file(keystoreProperties['jarsigning.keystore']).absolutePath
                    keyStorePassword = keystoreProperties['jarsigning.keystorePassword']
                    keyPassword = keystoreProperties['jarsigning.keyPassword']
                }

                project.tasks.named('build').configure {
                    dependsOn += task
                }
            } else if (project.name == 'webapp') {
                def task = project.tasks.register('signedBootJar', Sign) {
                    group = 'build'
                    dependsOn = [ project.tasks.named('bootJar') ]
                    buildDir = project.buildDir.absolutePath
                    archiveName = project.tasks.bootJar.archiveFileName
                    alias = keystoreProperties['jarsigning.alias']
                    keyStoreType = keystoreProperties['jarsigning.keystoreType']
                    keyStoreLocation = file(keystoreProperties['jarsigning.keystore']).absolutePath
                    keyStorePassword = keystoreProperties['jarsigning.keystorePassword']
                    keyPassword = keystoreProperties['jarsigning.keyPassword']
                }

                project.tasks.named('build').configure {
                    dependsOn += task
                }
            }
        }
    }
}

abstract class Sign extends DefaultTask {

    @Input abstract Property<String> getBuildDir()
    @Input abstract Property<String> getArchiveName()
    @Input abstract Property<String> getAlias()
    @Input abstract Property<String> getKeyStoreType()
    @Input abstract Property<String> getKeyStoreLocation()
    @Input abstract Property<String> getKeyStorePassword()
    @Input abstract Property<String> getKeyPassword()

    @TaskAction
    void action() {
        final String libsDir = buildDir.get() + File.separator + 'libs' + File.separator
        ant.signjar(
                jar: libsDir + archiveName.get(),
                signedjar: libsDir + generateSignedArtifactName(archiveName.get()),
                alias: alias.get(),
                storetype: keyStoreType.get(),
                keystore: keyStoreLocation.get(),
                storepass: keyStorePassword.get(),
                keypass: keyPassword.get()
        )
    }

    /**
     * Generates name with '-signed' suffix added to given artifact's name.
     * @param artifactName Original artifact's name.
     * @return Artifact's name with '-signed' suffix.
     */
    private static String generateSignedArtifactName(String artifactName) {
        final int lastDot = artifactName.lastIndexOf('.')
        return artifactName.substring(0, lastDot) + '-signed' + artifactName.substring(lastDot)
    }
}